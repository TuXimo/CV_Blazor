@implements IDisposable
@using System.Threading;
@using CV_Blazor.Models;
@using CV_Blazor.Services

@inject IStringLocalizer<Resources> Localizer

<div class="card project-card"
     @onmouseenter="MouseEnter"
     @onmouseleave="MouseLeave"
     @onclick="GoToProjectDetail"
     style="cursor:pointer;">
    <div class="card-inner">
        <div class="project-image-container">
            <img src="@currentImage" class="card-img-top" alt="@Project.Title" />
        </div>
    
        <div class="card-body">
            <div class="card-text-content">
                <h5 class="card-title">@Project.Title</h5>
                <p class="card-text">@Project.ShortDescription</p>
            </div>
    
            <div class="mt-auto">
                <a class="btn btn-primary" href="@Project.ProjectLink" target="_blank" @onclick:stopPropagation>
                    <i class="@GetProjectLinkIconClass() me-2"></i> @Localizer["ps_seeProject"]
                </a>
        
                @if (!string.IsNullOrEmpty(Project.GithubLink))
                {
                    <a href="@Project.GithubLink" class="btn btn-dark ms-2" target="_blank" @onclick:stopPropagation>GitHub</a>
                }
            </div>
            
            <div class="project-technologies">
                @foreach (var tech in Project.Technologies)
                {
                    var techName = tech.Split('-')[0];
                    <i class="devicon-@tech" title="@(char.ToUpper(techName[0]) + techName.Substring(1))"></i>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Project Project { get; set; } = null!;
    [Parameter] public bool IsProject { get; set; } = true;

    private string? currentImage;
    private int currentIndex = 0;
    private Timer? _slideshowTimer;

    [Inject] private NavigationManager NavManager { get; set; } = null!;

    protected override void OnInitialized()
    {
        currentImage = Project.MainImage;
    }

    private void MouseEnter()
    {
        if (Project.SecondaryImages == null || Project.SecondaryImages.Count == 0)
            return;

        currentIndex = -1;
        ShowNextImage();

        _slideshowTimer = new Timer(async state => await TimerCallback(state), null, 1500, 1500);
    }

    private void ShowNextImage()
    {
        currentIndex = (currentIndex + 1) % Project.SecondaryImages.Count;
        currentImage = Project.SecondaryImages[currentIndex];
    }

    private async Task TimerCallback(object? state)
    {
        // Invocamos el cambio de imagen y la actualización de la UI en un solo paso.
        await InvokeAsync(() => { ShowNextImage(); StateHasChanged();});
    }

    private void MouseLeave()
    {
        _slideshowTimer?.Dispose();

        currentImage = Project.MainImage;
        StateHasChanged();
    }

    private void GoToProjectDetail()
    {
        if (IsProject)
        {
            NavManager.NavigateTo($"/projects/{Project.Slug}");
        }
    }

    private string GetProjectLinkIconClass()
    {
        if (string.IsNullOrEmpty(Project.ProjectLink))
        {
            return "fas fa-link-slash"; // Icono por si no hay link
        }
        if (Project.ProjectLink.Contains("play.google.com"))
        {
            return "fab fa-google-play";
        }
        if (Project.ProjectLink.Contains("itch.io"))
        {
            return "fab fa-itch-io";
        }
        return "fas fa-globe"; // Icono por defecto para web
    }

    public void Dispose()
    {
        _slideshowTimer?.Dispose();
    }
}
