@using CV_Blazor.Models
@using CV_Blazor.Components
@using CV_Blazor.Services
@using Microsoft.Extensions.Localization

@inherits LayoutComponentBase
@inject IStringLocalizer<Resources> Localizer

<section id="resume" class="container py-5">
    <h2 class="text-center mb-4 section-title">@Localizer["nav_Resume"]</h2>
    <div class="row">
        <!-- Professional Experience -->
        <div class="col-md-6 mb-4">
            <h3>@Localizer["rs_xp"]</h3>
            @if (Portfolio?.Resume?.ProfessionalExperience != null)
            {
                @foreach (var exp in Portfolio.Resume.ProfessionalExperience)
                {
                    <div class="card p-3 mb-2">
                        <h5>@Localizer[$"ps_exp_{exp.Slug}_title"]</h5>
                        <p class="mb-1"><strong>@exp.Company</strong> | @exp.Period</p>
                        <ul class="mb-0 ps-3">
                            @foreach (var achievementKey in exp.AchievementKeys)
                            {
                                <li>@Localizer[achievementKey]</li>
                            }
                        </ul>
                    </div>
                }
            }
        </div>

        <!-- Education -->
        <div class="col-md-6 mb-4">
            <h3>@Localizer["rs_education"]</h3>
            @if (Portfolio?.Resume?.Education != null)
            {
                @foreach (var edu in Portfolio.Resume.Education)
                {
                    <div class="card p-3 mb-2">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5>@Localizer[$"ps_edu_{edu.Slug}_title"]</h5>
                                <p class="mb-1"><strong>@edu.Institution</strong> | @edu.Period</p>
                                <ul class="mb-0 ps-3">
                                    @if (!string.IsNullOrEmpty(edu.DescriptionKey))
                                    {
                                        <li>@Localizer[edu.DescriptionKey]</li>
                                    }
                                </ul>
                            </div>
                            @if (!string.IsNullOrEmpty(edu.Image))
                            {
                                <div @onclick="() => ShowModal(edu.Image)" class="ms-3 flex-shrink-0 d-none d-md-block">
                                    <img src="@edu.Image" alt="Certificate" style="width: 80px; height: auto; cursor: pointer; border-radius: 8px;" />
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>

@if (isModalVisible)
{
    <div class="modal-overlay" @onclick="HideModal">
        <img src="@selectedImage" class="modal-content" alt="Enlarged certificate" />
    </div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.85);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
        cursor: pointer;
    }

    .modal-content {
        max-width: 90vw;
        max-height: 90vh;
        object-fit: contain;
        cursor: default;
        background-color: #000;
    }
</style>

@code {
    [Parameter] public PortfolioViewModel? Portfolio { get; set; }

    private bool isModalVisible = false;
    private string? selectedImage;

    private void ShowModal(string imageUrl)
    {
        selectedImage = imageUrl;
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
        selectedImage = null;
    }
}
