@page "/skills"

@using CV_Blazor.Services
@using CV_Blazor.Models
@using System.Globalization
@using Microsoft.Extensions.Localization

@inject SkillService SkillService
@inject IStringLocalizer<Resources> Localizer

@implements IDisposable

<section id="skills" class="container py-5">
    <h2 class="section-title">@Localizer["nav_Skills"]</h2>

    <div class="skills-main-container border">

        <!-- 🧭 Marcadores laterales superpuestos -->
        <div class="skills-bookmarks">
            @if (skills != null)
            {
                @foreach (var skill in skills)
                {
                    var isActive = skill == selectedSkill;
                    <div class="skill-bookmark @(isActive ? "active" : "")"
                         @onclick="() => SelectSkill(skill)"
                         @onmouseover="() => HoverBookmark(skill)">
                        <img src="@skill.IconPath" alt="@skill.Name" />
                    </div>
                }
            }
        </div>

        <!-- 🎮 Lado izquierdo: íconos animados -->
        <div class="skills-icons-animation-area">
            @if (SkillsWithPosition != null)
            {
                @foreach (var skill in SkillsWithPosition)
                {
                    <div class="skill-icon-container"
                         style="left: @(FormatDouble(skill.X))px; top: @(FormatDouble(skill.Y))px;"
                         @onmouseover="@(() => OnHoverSkill(skill))"
                         @onmouseout="@(() => OnMouseOutSkill())">
                        <img src="@skill.IconPath" alt="@skill.Name" />
                    </div>
                }
            }
        </div>

        <!-- 📘 Lado derecho: detalles -->
        <div class="skills-details">
            @if (CurrentSkill != null)
            {
                <div class="skill-details-content animated-fade-in">
                    <h3 class="skill-title">@CurrentSkill.Name</h3>

                    <p class="skill-level-text">
                        @Localizer["ss_levelLabel"]: @(GetProficiencyText(CurrentSkill.Proficiency))
                    </p>

                    <div class="skill-level">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <span class="level-block @(i <= CurrentSkill.Proficiency ? "filled" : "empty")"></span>
                        }
                    </div>

                    <p class="skill-description">@CurrentSkill.Description</p>
                </div>
            }
        </div>

    </div>
</section>

@code {
    private List<SkillWithPosition> SkillsWithPosition = new();
    private List<Skill>? skills;
    private Skill? selectedSkill;
    private Skill? CurrentSkill;

    private System.Threading.Timer? _timer;
    private SkillWithPosition? _hoveredSkill;

    private const int AnimationWidth = 600;
    private const int AnimationHeight = 400;
    private const int IconSize = 80;

    // 🧩 Al inicializar: carga todo y arranca la animación
    protected override async Task OnInitializedAsync()
    {
        await LoadSkillsAsync();
    }

    private async Task LoadSkillsAsync()
    {
        _timer?.Dispose();

        var random = new Random();
        skills = (await SkillService.GetSkillsAsync()).ToList();

        SkillsWithPosition = skills.Select(s =>
        {
            var skill = new SkillWithPosition
            {
                Name = s.Name,
                IconPath = s.IconPath,
                Description = s.Description,
                Proficiency = s.Proficiency,
                X = random.Next(IconSize / 2, AnimationWidth - IconSize / 2),
                Y = random.Next(IconSize / 2, AnimationHeight - IconSize / 2)
            };
            skill.Dx = skill.OriginalDx = (random.NextDouble() * 2 - 1) * 2;
            skill.Dy = skill.OriginalDy = (random.NextDouble() * 2 - 1) * 2;
            return skill;
        }).ToList();

        if (SkillsWithPosition.Any())
        {
            CurrentSkill = SkillsWithPosition.First();
            selectedSkill = skills.First();
        }

        _timer = new System.Threading.Timer(UpdatePositions, null, 0, 16);
    }

    private void UpdatePositions(object? state)
    {
        foreach (var skill in SkillsWithPosition)
        {
            if (skill != _hoveredSkill)
            {
                double decelerationFactor = 0.95;
                if (Math.Abs(skill.Dx) > Math.Abs(skill.OriginalDx) || Math.Abs(skill.Dy) > Math.Abs(skill.OriginalDy))
                {
                    skill.Dx = (skill.Dx * decelerationFactor) + (skill.OriginalDx * (1 - decelerationFactor));
                    skill.Dy = (skill.Dy * decelerationFactor) + (skill.OriginalDy * (1 - decelerationFactor));
                }

                skill.X += skill.Dx;
                skill.Y += skill.Dy;

                if (skill.X <= 0)
                {
                    skill.X = 0;
                    skill.Dx = Math.Abs(skill.Dx);
                    if (Math.Abs(skill.Dx) < Math.Abs(skill.OriginalDx)) skill.Dx = skill.OriginalDx;
                }
                else if (skill.X >= AnimationWidth - IconSize)
                {
                    skill.X = AnimationWidth - IconSize;
                    skill.Dx = -Math.Abs(skill.Dx);
                    if (Math.Abs(skill.Dx) < Math.Abs(skill.OriginalDx)) skill.Dx = -skill.OriginalDx;
                }

                if (skill.Y <= 0)
                {
                    skill.Y = 0;
                    skill.Dy = Math.Abs(skill.Dy);
                    if (Math.Abs(skill.Dy) < Math.Abs(skill.OriginalDy)) skill.Dy = skill.OriginalDy;
                }
                else if (skill.Y >= AnimationHeight - IconSize)
                {
                    skill.Y = AnimationHeight - IconSize;
                    skill.Dy = -Math.Abs(skill.Dy);
                    if (Math.Abs(skill.Dy) < Math.Abs(skill.OriginalDy)) skill.Dy = -skill.OriginalDy;
                }
            }
        }
        InvokeAsync(StateHasChanged);
    }

    // 🖱️ Hover en íconos animados
    private void OnHoverSkill(SkillWithPosition hoveredSkill)
    {
        if (_hoveredSkill == hoveredSkill) return;

        _hoveredSkill = hoveredSkill;
        CurrentSkill = hoveredSkill;
        selectedSkill = skills?.FirstOrDefault(s => s.Name == hoveredSkill.Name);

        _hoveredSkill.Dx = 0;
        _hoveredSkill.Dy = 0;

        foreach (var skill in SkillsWithPosition)
        {
            if (skill != hoveredSkill)
            {
                double distanceX = skill.X - hoveredSkill.X;
                double distanceY = skill.Y - hoveredSkill.Y;
                double distance = Math.Sqrt(distanceX * distanceX + distanceY * distanceY);

                if (distance > 0 && distance < 150)
                {
                    double explosionForce = 150 / distance;
                    skill.Dx = (distanceX / distance) * explosionForce;
                    skill.Dy = (distanceY / distance) * explosionForce;
                }
            }
        }
    }

    private void OnMouseOutSkill()
    {
        if (_hoveredSkill != null)
        {
            _hoveredSkill.Dx = _hoveredSkill.OriginalDx;
            _hoveredSkill.Dy = _hoveredSkill.OriginalDy;
            _hoveredSkill = null;
        }
    }

    // 🔹 Click o hover en marcador
    private void SelectSkill(Skill skill)
    {
        selectedSkill = skill;
        CurrentSkill = SkillsWithPosition.FirstOrDefault(s => s.Name == skill.Name);
    }

    private void HoverBookmark(Skill skill)
    {
        CurrentSkill = SkillsWithPosition.FirstOrDefault(s => s.Name == skill.Name);
        selectedSkill = skill;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    // 🔠 Utilidades
    private string GetProficiencyText(int proficiency)
    {
        return proficiency switch
        {
            1 => Localizer["ss_level1"],
            2 => Localizer["ss_level2"],
            3 => Localizer["ss_level3"],
            4 => Localizer["ss_level4"],
            5 => Localizer["ss_level5"],
            _ => Localizer["ss_levelUndefined"]
        };
    }

    private string FormatDouble(double value)
    {
        return value.ToString(CultureInfo.InvariantCulture);
    }

    private class SkillWithPosition : Skill
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Dx { get; set; }
        public double Dy { get; set; }
        public double OriginalDx { get; set; }
        public double OriginalDy { get; set; }
    }
}
