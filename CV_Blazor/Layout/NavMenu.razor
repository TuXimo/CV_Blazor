@using CV_Blazor.Services
@using System.Globalization
@implements IAsyncDisposable

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Resources> Localizer

@inject NavigationManager NavigationManager
@inject LocalizationService LocService

<nav class="navbar navbar-expand-lg fixed-top @(isDarkMode ? "navbar-dark" : "")">
    <div class="container-fluid">
        <!-- Nombre -->
        <CV_Blazor.Components.Title/>

        <!-- Menú y botones juntos en desktop -->
        <div class="d-flex align-items-center order-lg-2">
            <button class="btn btn-link nav-icon me-2 no-underline" @onclick="ChangeLanguage">
                @CurrentLanguageName
                <i class="fas fa-globe"></i>
            </button>

            <button class="btn btn-link nav-icon me-2" @onclick="ToggleTheme">
                <i class="fas @(isDarkMode ? "fa-sun fa-fw" : "fa-moon fa-fw")"></i>
            </button>

            <!-- Botón toggle hamburguesa -->
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>

        <!-- Links del menú -->
        <div class="collapse navbar-collapse justify-content-center order-lg-1" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item"><a class="nav-link" href="#home">@Localizer["nav_Home"]</a></li>
                <li class="nav-item"><a class="nav-link" href="#resume">@Localizer["nav_Resume"]</a></li>
                <li class="nav-item"><a class="nav-link" href="#skills">@Localizer["nav_Skills"]</a></li>
                <li class="nav-item"><a class="nav-link" href="#projects">@Localizer["nav_Projects"]</a></li>
                <li class="nav-item"><a class="nav-link" href="#contact">@Localizer["nav_Contact"]</a></li>
            </ul>
        </div>
    </div>
</nav>

@code {
    private string CurrentLanguageName =>
        CultureInfo.CurrentUICulture.Name == "es-ES" ? "EN" : "ES";

    private IJSObjectReference? _navModule;
    private IJSObjectReference? _navManager;
    private bool isDarkMode;
    private readonly string _version = "1.2";

    private async Task ChangeLanguage()
    {
        var currentCulture = CultureInfo.CurrentUICulture.Name;
        var newCulture = currentCulture == "es-ES" ? "en-US" : "es-ES";
        await LocService.SetCultureAsync(newCulture);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await JSRuntime.InvokeAsync<bool>("applySavedTheme");
            StateHasChanged();

            _navModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./js/navmenu.js?v={_version}");

            if (_navModule is not null)
            {
                _navManager = await _navModule.InvokeAsync<IJSObjectReference>("initialize");
            }
        }
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        await JSRuntime.InvokeVoidAsync("toggleDarkMode", isDarkMode);
    }

    public async ValueTask DisposeAsync()
    {
        if (_navManager != null)
        {
            await _navManager.InvokeVoidAsync("dispose");
            await _navManager.DisposeAsync();
        }
        if (_navModule != null)
        {
            await _navModule.DisposeAsync();
        }
    }
}
